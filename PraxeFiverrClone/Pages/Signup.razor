@page "/signup"
@using LoginService;
@inject LoginManager loginManager;
@inject NavigationManager NavManager;

<div class="signup-wrapper">
	<div class="signup-form">
		<h1>Signup</h1>
		<input type="text"	   placeholder="Username"		 class="input-field" @oninput="@((e) => { usernameInput = ConvertInputToString(e.Value); })" />
		<input type="password" placeholder="Password"		 class="input-field" @oninput="@((e) => { passwordInput = ConvertInputToString(e.Value); })" />
		<input type="password" placeholder="Repeat Password" class="input-field" @oninput="@((e) => { passwordInputCheck = ConvertInputToString(e.Value); })" />
		
		@if (!string.IsNullOrEmpty(warningText))
		{
			<ErrorBox message=@warningText />
		}

		<button class="submit-button" @onclick="CreateUser">Sign up</button>
		<p>Allready have an account? <a href="/login">Log in</a>	</p>
	</div>
</div>

@code {

	private string UsernameInput { get; set; } = "";
	private string PasswordInput { get; set; } = "";
	private string PasswordInputCheck { get; set; } = "";

	private string WarningText = "";

	public void CreateUser()
	{
		if (string.IsNullOrEmpty(UsernameInput)) {
			WarningText = "The username can't be empty";
		}
		if (string.IsNullOrEmpty(PasswordInputCheck)) {
			WarningText = "The password cant be empty";
			return;
		}
		if (PasswordInput != PasswordInputCheck)
		{
			WarningText = "The passwords must match!";
			return;
		}

		try {
			loginManager.Signup(UsernameInput, PasswordInput);
		} 
		catch (LoginSignupException e) {
			WarningText = e.Message;
			return;
		} 
		NavManager.NavigateTo("/");
	}


	private string ConvertInputToString(object? input)
	{
		return input != null ? (string)input : "";
	}
}
