@page "/signup"
@using DataAccessLibrary
@using DataTemplateLibrary
@using DataTemplateLibrary.Models;
@inject DBManager dbManager;
@inject NavigationManager NavManager;


<h3>Signup</h3>
<br />
<p>Username:</p>
<input type="text" @bind="@UsernameValue" @oninput="@((e) => { UsernameValue=(string)e.Value;})" />
<p>Password:</p>
<input type="password" @bind="@PasswordValue" @oninput="@((e) => { PasswordValue=(string)e.Value;})" />
<p>Confirm password:</p>
<input type="password" @bind="@PasswordValue2" @oninput="@((e) => { PasswordValue2=(string)e.Value;})" />

<br />
<br />

<p style="color:red;">@WarningText</p>
<button @onclick="CreateUser">Sign up</button>

<br />  
<br />

<p>Allready have an account?'</p> <a href="/login">log in</a>

@code {

	private string UsernameValue { get; set; }
	private string PasswordValue { get; set; }
	private string PasswordValue2 { get; set; }

	private string WarningText = "";
	public void CreateUser()
	{
		if (UsernameValue == null) {
			WarningText = "The username cant be empty";
		}
		if (PasswordValue == null) {
			WarningText = "The password cant be empty";
			return;
		}
		if (PasswordValue != PasswordValue2)
		{
			WarningText = "The passwords must match!";
			return;
		}
		DBUser? user = new DBUser(UsernameValue, HashString(PasswordValue));
		DBUser? returned_user = null;

		try {
			returned_user = dbManager.SingUpUser(user);
		} catch (Exception e) {
			WarningText = e.Message;
			return;
		} 
		NavManager.NavigateTo("/login");
	}

	static string HashString(string text, string salt = "DC4U")
	{
		if (String.IsNullOrEmpty(text))
		{
			return String.Empty;
		}

		// Uses SHA256 to create the hash
		using (var sha = new System.Security.Cryptography.SHA256Managed())
		{
			// Convert the string to a byte array first, to be processed
			byte[] textBytes = System.Text.Encoding.UTF8.GetBytes(text + salt);
			byte[] hashBytes = sha.ComputeHash(textBytes);

			// Convert back to a string, removing the '-' that BitConverter adds
			string hash = BitConverter
				.ToString(hashBytes)
				.Replace("-", String.Empty);

			return hash;
		}
	}

}
