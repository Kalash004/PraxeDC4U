@page "/signup"
@using LoginService;
@inject LoginManager loginManager;
@inject NavigationManager NavManager;


<h3>Signup</h3>
<br />
<p>Username:</p>
<input type="text" @oninput="@((e) => { UsernameInput = ConvertInputToString(e.Value); })" />
<p>Password:</p>
<input type="password" @oninput="@((e) => { PasswordInput = ConvertInputToString(e.Value); })" />
<p>Confirm password:</p>
<input type="password" @oninput="@((e) => { PasswordInputCheck = ConvertInputToString(e.Value); })" />

<br />
<br />

<p style="color:red;">@WarningText</p>
<button @onclick="CreateUser">Sign up</button>

<br />  
<br />

<p>Already have an account?</p> <a href="/login">log in</a>

@code {

	private string UsernameInput { get; set; } = "";
	private string PasswordInput { get; set; } = "";
	private string PasswordInputCheck { get; set; } = "";

	private string WarningText = "";

	public void CreateUser()
	{
		if (string.IsNullOrEmpty(UsernameInput)) {
			WarningText = "The username can't be empty";
		}
		if (string.IsNullOrEmpty(PasswordInputCheck)) {
			WarningText = "The password cant be empty";
			return;
		}
		if (PasswordInput != PasswordInputCheck)
		{
			WarningText = "The passwords must match!";
			return;
		}

		try {
			loginManager.Signup(UsernameInput, PasswordInput);
		} 
		catch (LoginSignupException e) {
			WarningText = e.Message;
			return;
		} 
		NavManager.NavigateTo("/");
	}


	private string ConvertInputToString(object? input)
	{
		return input != null ? (string)input : "";
	}
}
