@page "/user/edit/{PageID:int}"
@using DataAccessLibrary;
@using DataAccessLibrary.DAOS;
@using DataTemplateLibrary.Models;
@inject ServerManagement.ServerManager ServerManager;
@inject NavigationManager NavManager;

@using LoginService;
@inject LoginManager loginManager;

<h3>Edit Service</h3>

<h3>name:</h3>
<input type="text" @bind="@Name" @oninput="@((e) => { Name=(string)e.Value;})" />

<h3>price:</h3>
<input type="text" @bind="@Price" @oninput="@((e) => { try {Price=Int32.Parse((string)e.Value + "");}catch(Exception){}})" />

<h3>short:</h3>
<input type="text" @bind="@Description" @oninput="@((e) => { Description=(string)e.Value;})" />

<h3>long:</h3>
<input type="text" @bind="@DescriptionLong" @oninput="@((e) => { DescriptionLong=(string)e.Value;})" />

<h3>unlisted </h3>
<input type="checkbox" @onchange="eventArgs => { CheckboxClicked(eventArgs.Value); }" />

<button @onclick="SetValues">revert all changes</button>
<br />

<button @onclick="EditService">confirm changes</button>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (loginManager != null)
            {
                await loginManager.Fetch();
                CheckIfOwner();
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public int PageID { get; set; }

    private String Name { get; set; }
    private int Price { get; set; }
    private String Description { get; set; }
    private string DescriptionLong { get; set; }
    private bool Listed { get; set; }

    private DBService service;
    public LoginService.LoginManager LoginManager { get; set; }

    private void EditService()
    {
        // DBService NewService = new DBService(Cookies.GetSessionCookieInt("userID").Result, Name, Price, ServerManager.GetService(Cookies.GetSessionCookieString("ID").Result, PageID).Created, DateOnly.FromDateTime(DateTime.Now), Listed, Description, DescriptionLong, null, false);
        // ServerManager.UpdateService(Cookies.GetSessionCookieString("ID").Result, PageID, NewService);
    }

    private void SetValues()
    {
        Name = service.ServiceName;
        Price = service.CurrentPrice;
        Description = service.ShortDescription;
        DescriptionLong = service.LongDescription;
        Listed = service.IsShown;
    }

    public void CheckboxClicked(object CheckedValue)
    {
        Listed = (bool)CheckedValue;
    }

    private void CheckIfOwner()
    {
        //kickes user if not signed in
        if (LoginManager.UserID != PageID)
        {
            NavManager.NavigateTo("/login");
        }
    }
}
