@page "/user/edit/{PageID:int}"
@using DataAccessLibrary;
@using DataAccessLibrary.DAOS;
@using DataTemplateLibrary.Models;
@using SessionService;
@inject LoginService.LoginManager LoginManager;
@inject ServerManagement.ServerManager ServerManager;
@inject NavigationManager NavManager;

<h2>Statistics</h2>
<label for="timeframe">select timeframe:</label>
<select name="timeframe" id="timeframe">
    <option @onclick = "SetDay">day</option>
    <option @onclick="SetWeek">week</option>
    <option @onclick="SetMonth">month</option>
    <option @onclick="SetYear">year</option>
</select>
<p>number of purchases in time frame: @NumberOfBuys</p>
<br/>
<p>total number of credits earned: @Money</p>
<br/>
<br/>
<h2>Edit Service</h2>

<h3>name:</h3>
<input type="text" @bind="@Name" @oninput="@((e) => { Name=(string)e.Value;})" />

<h3>price:</h3>
<input type="text" @bind="@Price" @oninput="@((e) => { try {Price=Int32.Parse((string)e.Value + "");}catch(Exception){}})" />

<h3>short:</h3>
<input type="text" @bind="@Description" @oninput="@((e) => { Description=(string)e.Value;})" />

<h3>long:</h3>
<input type="text" @bind="@DescriptionLong" @oninput="@((e) => { DescriptionLong=(string)e.Value;})" />

<button @onclick="SetValues">revert all changes</button>
<br />

<button @onclick="EditService">confirm changes</button>

@code {
    [Parameter]
    public int PageID { get; set; }

    private String Name { get; set; }
    private int Price { get; set; }
    private String Description { get; set; }
    private string DescriptionLong { get; set; }
    private bool Listed { get; set; } = true;

    private bool first = true;
    private DBService service;

    private int NumberOfBuys;
    private EnumAnaliticsTimeSpan TimeSpan = EnumAnaliticsTimeSpan.Day;
    private int Money;

    private void EditService()
    {
        DBService NewService = new DBService(LoginManager.UserID, Name, Price, ServerManager.GetService(PageID).Created, DateOnly.FromDateTime(DateTime.Now), Listed, Description, DescriptionLong, null, false);
        ServerManager.UpdateService(LoginManager.SessionID, PageID, NewService);
        NavManager.NavigateTo("/user");

    }

    private void SetValues()
    {
        Name = service.ServiceName;
        Price = service.CurrentPrice;
        Description = service.ShortDescription;
        DescriptionLong = service.LongDescription;
        Listed = service.IsShown;
        NumberOfBuys = ServerManager.GetAmountOfBuys(TimeSpan,LoginManager.SessionID,PageID);
        
        StateHasChanged();
    }

    private void SetDay() { TimeSpan = EnumAnaliticsTimeSpan.Day;  }
    private void SetWeek() { TimeSpan = EnumAnaliticsTimeSpan.Week; }
    private void SetMonth() { TimeSpan = EnumAnaliticsTimeSpan.Month; }
    private void SetYear() { TimeSpan = EnumAnaliticsTimeSpan.Year; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        CheckIfOwner();
    }

    private void CheckIfOwner()
    {
        //kickes user if not signed in
        if (!LoginManager.LoggedIn)
        {
            NavManager.NavigateTo("/login");
        }
        //kicks if not owner
        if (LoginManager.UserID != ServerManager.GetService(PageID).UserId)
        {
            NavManager.NavigateTo("/login");
        }

        if (first) {
            service = ServerManager.GetService(PageID);
            SetValues();
            first = false;
        }
    }
}
